# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U5V8NMcEeRMrZr5XGfbSMzAmpfAVjZlT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# from csv to df
calories = pd.read_csv('calories.csv')
exercise = pd.read_csv('exercise.csv')

calories.head()

exercise.head()

exercise_data=pd.read_csv('exercise.csv')
# combining datas

calories_data= pd.concat([exercise_data, calories['Calories']], axis=1)
calories_data.head()

calories_data.info()

#data stat
calories_data.describe()

calories_data.shape

calories_data.isnull().sum()

# visualization

sns.set()

sns.countplot(x='Gender', data=calories_data, hue='Gender')
plt.show()

sns.distplot(calories_data['Height'])

sns.distplot(calories_data['Weight'])

sns.distplot(calories_data['Age'])

sns.distplot(calories_data['Heart_Rate'])

sns.pairplot(calories_data, hue='Gender')
plt.show()

# from object to int: in gender data, data preprocessing

calories_data.replace({'Gender':{'male':0, 'female':1}}, inplace=True)
calories_data.head()

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

# Feature Engineering: Calculate BMI from height and weight
calories_data['BMI'] = calories_data['Weight'] / ((calories_data['Height'] / 100) ** 2)

# Handle missing values
imputer = SimpleImputer(strategy='mean')  # Impute missing values with mean
calories_data['Age'] = imputer.fit_transform(calories_data[['Age']])

# Scale the features (standardization)
scaler = StandardScaler()
scaled_features = scaler.fit_transform(calories_data.drop(columns=['Calories', 'User_ID']))

# Defining X and Y features
X=calories_data.drop(columns=['Calories', 'User_ID'], axis=1)
Y=calories_data['Calories']
print(X)

print(Y)

# training and testing data
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)
print(X.shape, X_train.shape, X_test.shape)


# Hyperparameter Tuning: Using GridSearchCV for XGBoost
param_grid = {
    'n_estimators': [100, 200, 300],
    'learning_rate': [0.01, 0.1, 0.3],
    'max_depth': [3, 5, 7],
    'subsample': [0.7, 0.8, 1.0],
}

xgb = XGBRegressor(random_state=42)

grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=3, scoring='neg_mean_absolute_error', verbose=1)
grid_search.fit(X_train, Y_train)

# Get the best hyperparameters from GridSearchCV
best_params = grid_search.best_params_
print(f"Best Hyperparameters: {best_params}")

# Train the model with the best hyperparameters
best_model = grid_search.best_estimator_
best_model.fit(X_train, Y_train)

model = XGBRegressor()
model.fit(X_train, Y_train)

test_data_prediction = model.predict(X_test)
print(test_data_prediction)

#mean absolute error
mae = metrics.mean_absolute_error(Y_test, test_data_prediction)
r2_score = metrics.r2_score(Y_test, test_data_prediction)
rmse = np.sqrt(mean_squared_error(Y_test, test_data_prediction))


print("Mean Absolute Error: ", mae)
print("R2 Score: ", r2_score)
print("rmse: ", rmse)

# actual vs predicted values
plt.figure(figsize=(10,6))
sns.scatterplot(x=Y_test, y=test_data_prediction)
plt.xlabel("Actual Calories Burnt")
plt.ylabel("Predicted Calories Burnt")
plt.title("Actual vs Predicted Calories Burnt")
plt.show()

# Cross-validation to evaluate model performance
cv_scores = cross_val_score(best_model, X, Y, cv=5, scoring='neg_mean_absolute_error')
print(f"Cross-Validation MAE Scores: {cv_scores}")
print(f"Mean Cross-Validation MAE: {cv_scores.mean()}")

# Feature Importance
plt.figure(figsize=(10, 6))
sns.barplot(x=best_model.feature_importances_, y=X.columns)
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Features')
plt.show()

# Visualizations
# Correlation heatmap
plt.figure(figsize=(10, 8))
corr_matrix = calories_data.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()